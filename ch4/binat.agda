module binat where

open import empty
open import eq
open import list
open import maybe
open import nat using (nat)
open import nat-thms
open import product
open import product-thms
open import unit

data bit : Set where
  O : bit
  I : bit

binat : Set
binat = maybe (ùïÉ bit)

zero : binat
zero = nothing

one : binat
one = just []

two : binat
two = just (O :: [])

bitToNat : bit ‚Üí nat
bitToNat O = nat.zero
bitToNat I = nat.suc nat.zero

toNat‚Å∫ : ùïÉ bit ‚Üí nat
toNat‚Å∫ [] = nat.suc nat.zero
toNat‚Å∫ (b :: bs) = bitToNat b nat.+ (2 nat.* toNat‚Å∫ bs)

toNat : binat ‚Üí nat
toNat nothing = nat.zero
toNat (just bs) = toNat‚Å∫ bs

suc‚Å∫ : ùïÉ bit ‚Üí ùïÉ bit
suc‚Å∫ [] = O :: []
suc‚Å∫ (O :: bs) = I :: bs
suc‚Å∫ (I :: bs) = O :: suc‚Å∫ bs

suc : binat ‚Üí binat
suc nothing = just []
suc (just bs) = just (suc‚Å∫ bs)

fromNatPred : nat ‚Üí ùïÉ bit
fromNatPred nat.zero = []
fromNatPred (nat.suc n) = suc‚Å∫ (fromNatPred n)

fromNat : nat ‚Üí binat
fromNat nat.zero = nothing
fromNat (nat.suc n) = just (fromNatPred n)

toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ : (bs : ùïÉ bit) ‚Üí toNat‚Å∫ (suc‚Å∫ bs) ‚â° nat.suc (toNat‚Å∫ bs)
toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ [] = refl
toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ (O :: bs) = refl
toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ (I :: bs) rewrite toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ bs with toNat‚Å∫ bs
... | n rewrite +0 n | +suc n n = refl

toNat‚Å∫fromNatPred‚â°nat : (n : nat) ‚Üí toNat‚Å∫ (fromNatPred n) ‚â° nat.suc n
toNat‚Å∫fromNatPred‚â°nat nat.zero = refl
toNat‚Å∫fromNatPred‚â°nat (nat.suc n)
  rewrite toNat‚Å∫suc‚Å∫‚â°sucToNat‚Å∫ (fromNatPred n) =
    cong nat.suc (toNat‚Å∫fromNatPred‚â°nat n)

toFrom‚â°nat : (n : nat) ‚Üí toNat (fromNat n) ‚â° n
toFrom‚â°nat nat.zero = refl
toFrom‚â°nat (nat.suc n) = toNat‚Å∫fromNatPred‚â°nat n

toNat‚Å∫‚â°suc : (bs : ùïÉ bit) ‚Üí Œ£ nat (Œª n ‚Üí toNat‚Å∫ bs ‚â° nat.suc n)
toNat‚Å∫‚â°suc [] = 0 , refl
toNat‚Å∫‚â°suc (b :: bs) with toNat‚Å∫‚â°suc bs
toNat‚Å∫‚â°suc (b :: bs) | n , p rewrite
  p | +0 n | +suc (bitToNat b) (n nat.+ nat.suc n) =
  bitToNat b nat.+ (n nat.+ nat.suc n) , refl

0‚â°suc-false : {n : nat} ‚Üí nat.zero ‚â° nat.suc n ‚Üí ‚ä•
0‚â°suc-false ()

+-same-inj : (n m : nat) ‚Üí n nat.+ n ‚â° m nat.+ m ‚Üí n ‚â° m
+-same-inj nat.zero nat.zero p = refl
+-same-inj nat.zero (nat.suc m) p = ‚ä•-elim (0‚â°suc-false p)
+-same-inj (nat.suc n) nat.zero p = ‚ä•-elim (0‚â°suc-false (sym p))
+-same-inj (nat.suc n) (nat.suc m) p rewrite +suc n n | +suc m m =
  cong nat.suc (+-same-inj n m (suc-inj (suc-inj p)))

+-same-suc-false : (n m : nat) ‚Üí n nat.+ n ‚â° nat.suc (m nat.+ m) ‚Üí ‚ä•
+-same-suc-false nat.zero m p = 0‚â°suc-false p
+-same-suc-false (nat.suc n) nat.zero p rewrite +suc n n =
  0‚â°suc-false (suc-inj (sym p))
+-same-suc-false (nat.suc n) (nat.suc m) p rewrite +suc n n | +suc m m =
  +-same-suc-false n m (suc-inj (suc-inj p))

toNat‚Å∫Inj : (nbs mbs : ùïÉ bit) ‚Üí toNat‚Å∫ nbs ‚â° toNat‚Å∫ mbs ‚Üí nbs ‚â° mbs
toNat‚Å∫Inj [] [] p = refl
toNat‚Å∫Inj [] (b :: mbs) p with toNat‚Å∫‚â°suc mbs
... | r , q rewrite q | +0 (nat.suc r) | +suc r r with bitToNat b | r nat.+ r
... | bn | r2 rewrite +suc bn (nat.suc r2) | +suc bn r2 =
  ‚ä•-elim (0‚â°suc-false (suc-inj p))
toNat‚Å∫Inj (b :: nbs) [] p with toNat‚Å∫‚â°suc nbs
... | r , q rewrite q | +0 (nat.suc r) | +suc r r with bitToNat b | r nat.+ r
... | bn | r2 rewrite +suc bn (nat.suc r2) | +suc bn r2 =
  ‚ä•-elim (0‚â°suc-false (suc-inj (sym p)))
toNat‚Å∫Inj (nb :: nbs) (mb :: mbs) p rewrite +0 (toNat‚Å∫ nbs) | +0 (toNat‚Å∫ mbs)
  with ‚ä§
toNat‚Å∫Inj (O :: nbs) (O :: mbs) p | _ =
  cong (_::_ O) (toNat‚Å∫Inj nbs mbs (+-same-inj (toNat‚Å∫ nbs) (toNat‚Å∫ mbs) p))
toNat‚Å∫Inj (O :: nbs) (I :: mbs) p | _ =
  ‚ä•-elim (+-same-suc-false (toNat‚Å∫ nbs) (toNat‚Å∫ mbs) p)
toNat‚Å∫Inj (I :: nbs) (O :: mbs) p | _ =
  ‚ä•-elim (+-same-suc-false (toNat‚Å∫ mbs) (toNat‚Å∫ nbs) (sym p))
toNat‚Å∫Inj (I :: nbs) (I :: mbs) p | _ =
  cong (_::_ I)
       (toNat‚Å∫Inj nbs mbs (+-same-inj (toNat‚Å∫ nbs) (toNat‚Å∫ mbs) (suc-inj p)))

toNatInj : (n m : binat) ‚Üí toNat n ‚â° toNat m ‚Üí n ‚â° m
toNatInj nothing nothing p = refl
toNatInj nothing (just mbs) p with toNat‚Å∫‚â°suc mbs
toNatInj nothing (just mbs) p | r , q = ‚ä•-elim (0‚â°suc-false (trans p q))
toNatInj (just nbs) nothing p with toNat‚Å∫‚â°suc nbs
toNatInj (just nbs) nothing p | r , q = ‚ä•-elim (0‚â°suc-false (trans (sym p) q))
toNatInj (just nbs) (just mbs) p = cong just (toNat‚Å∫Inj nbs mbs p)

fromTo‚â°binat : (n : binat) ‚Üí fromNat (toNat n) ‚â° n
fromTo‚â°binat n = toNatInj (fromNat (toNat n)) n (toFrom‚â°nat (toNat n))

-- Can it be proved directly?
fromTo‚â°binat' : (n : binat) ‚Üí fromNat (toNat n) ‚â° n
fromTo‚â°binat' nothing = refl
fromTo‚â°binat' (just bs) with toNat‚Å∫‚â°suc bs
... | r , p rewrite p = cong just {!!}

fromTo‚â°binat'' : (n : binat) ‚Üí fromNat (toNat n) ‚â° n
fromTo‚â°binat'' nothing = refl
fromTo‚â°binat'' (just []) = refl
fromTo‚â°binat'' (just (b :: bs)) rewrite +0 (toNat‚Å∫ bs) with toNat‚Å∫‚â°suc bs
fromTo‚â°binat'' (just (O :: bs)) | r , p rewrite p | +suc r r = {!!}
fromTo‚â°binat'' (just (I :: bs)) | r , p rewrite p | +suc r r = {!!}

-- Need something stronger than this:
-- toNat‚Å∫‚â°suc : (bs : ùïÉ bit) ‚Üí Œ£ nat (Œª n ‚Üí toNat‚Å∫ bs ‚â° nat.suc n)
